GnuTLS Demo Programs

The 'c' (client) and 's' (server) programs are based on public domain examples
from the GnuTLS release.

GnuTLS 2.12.20 or later is assumed.

Build the source using:

  make

Test using this:

  ./s &
  ./c

---

GnuTLS Client - processing example

// ctor

// connect
gnutls_global_init ();
gnutls_certificate_credentials_t xcred;
gnutls_certificate_allocate_credentials (&xcred);
gnutls_certificate_set_x509_trust_file (xcred, CAFILE, GNUTLS_X509_FMT_PEM);
gnutls_session_t session;
gnutls_init (&session, GNUTLS_CLIENT);
gnutls_priority_set_direct (session, "NORMAL", &err);
gnutls_credentials_set (session, GNUTLS_CRD_CERTIFICATE, xcred);
socket (AF_INET, SOCK_STREAM, 0);

struct sockaddr_in sa;
memset (&sa, '\0', sizeof (sa));
sa.sin_family = AF_INET;
sa.sin_port = htons (atoi (PORT));
inet_pton (AF_INET, SERVER, &sa.sin_addr);
connect (sd, (struct sockaddr *) & sa, sizeof (sa));

gnutls_transport_set_ptr (session, (gnutls_transport_ptr_t) sd);
gnutls_handshake (session);

// interact
gnutls_record_send (session, MSG, strlen (MSG));
gnutls_record_recv (session, buffer, MAX_BUF);

// close
shutdown (sd, SHUT_RDWR);
close (sd);
gnutls_deinit (session);
gnutls_certificate_free_credentials (xcred);
gnutls_global_deinit ();

// dtor

---

GnuTLS Server - processing example

// ctor

// listen
gnutls_global_init ();
gnutls_certificate_allocate_credentials (&x509_cred);
gnutls_certificate_set_x509_trust_file (x509_cred, CAFILE, GNUTLS_X509_FMT_PEM);
gnutls_certificate_set_x509_crl_file (x509_cred, CRLFILE, GNUTLS_X509_FMT_PEM);
gnutls_certificate_set_x509_key_file (x509_cred, CERTFILE, KEYFILE, GNUTLS_X509_FMT_PEM);
gnutls_dh_params_init (&dh_params);
gnutls_dh_params_generate2 (dh_params, DH_BITS);
gnutls_priority_init (&priority_cache, "NORMAL", NULL);
gnutls_certificate_set_dh_params (x509_cred, dh_params);

socket (AF_INET, SOCK_STREAM, 0);

struct sockaddr_in sa_serv;
memset (&sa_serv, '\0', sizeof (sa_serv));
sa_serv.sin_family = AF_INET;
sa_serv.sin_addr.s_addr = INADDR_ANY;
sa_serv.sin_port = htons (PORT);      // Server Port number

setsockopt (listen_sd, SOL_SOCKET, SO_REUSEADDR, (void *) &optval, sizeof (int));

bind (listen_sd, (struct sockaddr *) & sa_serv, sizeof (sa_serv));
listen (listen_sd, 1024);

struct sockaddr_in sa_cli;
int client_len = sizeof (sa_cli);
for (;;)
{
  // accept
  gnutls_session_t session;
  gnutls_init (&session, GNUTLS_SERVER);
  gnutls_priority_set (session, priority_cache);
  gnutls_credentials_set (session, GNUTLS_CRD_CERTIFICATE, x509_cred);
  gnutls_certificate_server_set_request (session, GNUTLS_CERT_REQUEST);
  gnutls_session_enable_compatibility_mode (session);

  // child ctor
  int sd = accept (listen_sd, (struct sockaddr *) &sa_cli, (socklen_t*) &client_len);
  gnutls_transport_set_ptr (session, (gnutls_transport_ptr_t) sd);

  gnutls_handshake (session);

  // child interact
  gnutls_record_recv (session, buffer, MAX_BUF);
  gnutls_record_send (session, buffer, strlen (buffer));

  // child close
  gnutls_bye (session, GNUTLS_SHUT_WR);
  close (sd);

  // child dtor
  gnutls_deinit (session);
}

// close
close (listen_sd);

// dtor
gnutls_certificate_free_credentials (x509_cred);
gnutls_priority_deinit (priority_cache);
gnutls_global_deinit ();

