Göteborg Bit Factory                                                  June 2013

                        Writing a Client for Task Server
                                   Version 1


Status of this Memo

   This document provides information for the Internet community.  It does not
   specify an Internet standard of any kind.  Distribution of this document is
   not restricted.


Copyright Notice

   Copyright (C) 2010 - 2013, Göteborg Bit Factory.


Abstract

   A Task Server client is a todo-list manager.  It may be as simple as a
   program that captures a single task, as complex as Taskwarrior, or anything
   in between.  It can be a mobile client, a web application, or any other type
   of program.

   This document describes how such a client would interact with the server.


Table of Contents

   1      Introduction
   1.1    Requirements
   2      Task Server Account
   2.1      Credentials
   2.2      Registration
   3      Description of a Task Server client
   3.1      Encryption
   3.2      Configuration
   3.3      Local Storage
   3.4      Local Changes
-  3.5      Remote Changes
   3.6      Data Integrity
-  4      Synchronizing
-  4.1      Establish Encrypted Connection
-  4.2      Sync Request
-  4.3      Sync Response
-  4.4      Server Messages
-  5      Server Errors
   6      Reference Implementation
   7      References
-  8      Acknowledgements
-  9      Authors' Addresses
   10     Full Copyright Statement


1  Introduction

   A client to the Task Server is a program that manages a task list, and
   wishes to exchange data with the server so that the task list may be shared.

   In order to do this, a client must store tasks locally, upload local changes,
   download remote changes, and apply remote changes to the local tasks.

   The client must consider that there may be no network connectivity, or no
   desire by the user to synchronize.

   The client will need proper credentials to talk to the server.


1.1  Requirements

   In this document, we adopt the convention discussed in Section 1.3.2 of
   [RFC1122] of using the capitalized words MUST, REQUIRED, SHOULD, RECOMMENDED,
   MAY, and OPTIONAL to define the significance of each particular requirement
   specified in this document.

   In brief: "MUST" (or "REQUIRED") means that the item is an absolute
   requirement of the specification; "SHOULD" (or "RECOMMENDED") means there may
   exist valid reasons for ignoring this item, but the full implications should
   be understood before doing so; and "MAY" (or "OPTIONAL") means that this item
   is optional, and may be omitted without careful consideration.


2  Task Server Account

   A Task Server account must be created.  This process creates a storage area,
   and generates the necessary credentials.


2.1  Credentials

   A Task Server client needs the following credentials in order to communicate
   with a server:

      - Server address and port
      - Organization name
      - User name
      - Password
      - Certificate

   The server address and port are the network location of the server.  An
   example of this value is:

      tasktools.org:6544

   In addition to a DNS name, this can be an IPv4 or IPv6 address.

   The organization name is an arbitrary grouping, and is typically 'PUBLIC',
   reflecting the individual nature of server accounts.  Future capabilities
   will provide functionality that support groups of users, called an
   organization.

   The user name is the full name.  This will be the name used to identify other
   users in an organization, in a future release.  Example 'John Doe'.

   The password is a text string generated by the server at account creation
   time.  It should be considered a secret.

   The certificate is an X.509 PEM file generated by the server at account
   creation time.  This is used for encryption.  It should be considered a
   secret.

   These credentials need to be stored on the client, and used during the sync
   operation.


2.2  Registration

   Registration is the process of creating an account and receiving user
   credentials.  It is a process run once per account.

   -------------

   Note: This section is to be completed when the online registration site is
         operational, and will include examples of how to manually and
         programmatically obtain credentials.

   -------------


3  Description of a Task Server client

   This section describes how a client might behave in order to facilitate
   integration with the Task Server.


3.1  Encryption

   The Task Server only communicates using encryption.  Therefore all user data
   is encrypted while in transit.  The Task Server currently uses GnuTLS
   [GnuTLS] to support this encryption, and therefore supports the following
   protocols:

      SSL 3.0
      TLS 1.0
      TLS 1.1
      TLS 1.2

   The client may use any library that supports the above.


3.2  Configuration

   The client needs to store configuration, which matches the credentials needed
   for Task Server communication.  See section 2.1 "Credentials".

   The credentials may not be modified by the user without losing server access.

   The server:port data may need to be changed automatically following a
   redirect response from the server.  See section 5 "Server Errors".


3.3  Local Storage

   The client needs to store task data locally.  The client will need to be able
   to find tasks by their UUID and overwrite them.  Uploaded and downloaded task
   changes will use the Taskwarrior Data Interchange Format [Task JSON].


3.4  Local Changes

   Whenever local data is modified, that change MUST be synced with the server.
   This does not have to occur immediately, in fact the client SHOULD NOT assume
   connectivity at any time.

   A client SHOULD NOT also assume that the server is available.  If the server
   is not available, the local changes should be retained, and the sync
   operation repeated later.

   Ideally the client will give the user full control over sync operations.
   Automatically syncing after all local modifications is not recommended.  If a
   client performs too many sync operations, the server MAY revoke the
   certificate.

   Effectively, the client should maintain a separate list of tasks changed
   since the last successful sync operation.


================================================================================

3.5  Remote Changes


3.6  Data Integrity

   Although a task is guaranteed to contain at least 'entry', 'description' and
   'uuid' attributes, it may also contain other known fields, and unknown
   user-defined fields.  An example might be an attribute named 'estimate'.

   If a task is received via sync that contains an attribute named 'estimate',
   then a client has the responsibility of preserving the attribute intact.  If
   that data is shown, then it is assumed to be of type 'string', which is the
   format used by JSON for all values.

   Conversely, if a client wishes to add a custom attribute, it is guaranteed
   that the server and other clients will preserve that attribute.

   Using this rule, two clients of differing capabilities can exchange data and
   still maintain custom attributes.

   This is a requirement.  Any client that does not obey this requirement is
   broken.


4  Synchronizing


4.1  Establish Encrypted Connection


4.2  Sync Request


4.3  Sync Response


4.4  Server Messages

   There are cases when the server needs to inform the user of some condition.
   This may be anticipated server downtime, for example.  If such a message is
   returned by the server, it SHOULD be made available to the user.  This is a
   recommendation, not a requirement.


5  Server Errors


6  Reference Implementation

   The Task Server codebase contains a reference implementation of an SSL/TLS
   client and server program, which communicate text strings.

      taskd.git/src/tls/Makefile             # To build the example
      taskd.git/src/tls/README               # How to run the example
      taskd.git/src/tls/TLSClient.cpp        # TLS client code
      taskd.git/src/tls/TLSClient.h
      taskd.git/src/tls/TLSServer.cpp        # TLS Server code
      taskd.git/src/tls/TLSServer.h
      taskd.git/src/tls/c.cpp                # Client program
      taskd.git/src/tls/s.cpp                # Server program

   The Taskwarrior codebase, version 2.3.0+, is the reference implementation.

      task.git/src/TLSClient.cpp             # TLS client code
      task.git/src/TLSClient.h
      task.git/src/commands/CmdSync.cpp      # Sync implementation
      task.git/src/commands/CmdSync.h


7  References

   [RFC640] Postel, J., "Revised FTP Reply Codes", RFC 640, June,
        1975.

   [RFC1122] IETF, "Requirements for Internet Hosts - Communication
        Layers", October 1989.

   [GnuTLS] http://www.gnutls.org/manual/gnutls.html

   [Task JSON] "Taskwarrior Data Interchange Format"


8  Acknowledgements

   Thanks to ... for testing and feedback.

   Thanks to ... whose comments helped improve this document.


9  Authors' Addresses

   Federico Hernandez
   Email: fredde@taskwarrior.org

   Paul Beckingham
   Email: paul@taskwarrior.org


10  Full Copyright Statement

   Copyright 2010 - 2013, Göteborg Bit Factory.
   All rights reserved.

   This document and translations of it may be copied and furnished to others,
   and derivative works that comment on or otherwise explain it or assist in its
   implmentation may be prepared, copied, published and distributed, in whole or
   in part, without restriction of any kind, provided that the above copyright
   notice and this paragraph are included on all such copies and derivative
   works.  However, this document itself may not be modified in any way, such as
   by removing the copyright notice or by ommission of certain sections.

   The limited permissions granted above are perpetual and will not be revoked
   by the authors or their successors or assigns.

   This document and the information contained herein is provided on an "AS IS"
   basis and the authors disclaim all warranties, express or implied, including
   but not limited to any warranty that the use of the information herein will
   not infringe any rights or any implied warranties of merchantability or
   fitness for a particular purpose.

---

