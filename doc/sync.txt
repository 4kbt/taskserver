Task Server Sync Algorithm
--------------------------

N. Algorithm Details

  The sync algorithm considers a single task, and a series of changes
  originating with a client, in addition to a series of changes from the server.
  Multiple clients are just more examples of the same use cases.

  There are a limited number of use cases.  Going through these will illustrate
  the algorithm.  First the legend:

    T0   Represents a task on the server.
    T1   Represents the same task with a non-trivial set of modifications.
    T2   Represents the same task with further modifications.

  A sequence of changes to the same task is represented as:

    T0 --> T1 --> T2


N. Patching

  Patching a task involves determine the delta between two tasks, and then in
  turn applying that difference to a third task.  For example, here are two
  tasks, with differences, shown in 'task add ...' syntax:

    project:ONE  due:tomorrow  priority:H  +tag1  Original description
    project:TWO  due:23rd      priority:H  +tag1  Original description
    ------------------------------------------------------------------
    project:TWO  due:23rd

  The patch between the first and second is to make these changes:

    project:TWO  due:23rd

  Now consider three tasks, where the first is the original version, and the
  others represent two separate modifications to that original.

    project:ONE  due:tomorrow  priority:H  +tag1  Original description
    project:TWO  due:23rd      priority:H  +tag1  Original description
    project:ONE  due:tomorrow  priority:H  +tag1  Modified description
    ------------------------------------------------------------------
    project:TWO  due:23rd                         Modified description

  These do not conflict, and so both deltas may be applied to the original,
  resulting in this:

    project:TWO  due:23rd      priority:H  +tag1  Modified description

  In the case of a conflict, the 'modified' attribute, if present, can be used
  to adjudicate.  If the 'modified' attribute is missing, the latest of the
  'entry', 'end' or 'start' dates is used.  For example:

    project:ONE    due:tomorrow  Original description
    project:TWO    due:23rd      Original description   <-- modified:12:34
    project:THREE  due:tomorrow  Modified description   <-- modified:12:20
    -------------------------------------------------
    project:TWO    due:23rd      Modified description


N. Use Case 1: Client syncs a new task

  The server has no data, and so T0 is sent and stored.  A new synch key is
  generated and returned.

    Server:  -
    Client:  T0

  The server constructs this (trivial) tree:

    T0

  T1 is stored on the server and the client received a new sync key.  The result
  is now:

    Server:  T0
    Client:  T0


N. Use Case 2: Client modifies task and syncs

  The initial state is now:

    Server:  T0
    Client:  T0 --> T1

  The server constructs this tree:

    T0 --> T1

  The following patches are applied to T0:

    T0 --> T1

  Yielding:

    T0 + (T0 --> T1) = T1

  T2 is returned to the client with a new sync key.  The result is now:

    Server:  T0 --> T1
    Client:  T1


N. Use Case 3: Client changes a task and syncs.  Server has an unsynced change
   to the same task.

  The initial state is:

    Server:  T0 --> T1
    Client:  T0 --> T2

  The server constructs this tree:

    T0 --> T1
       --> T2

  The order of change is determine to be T1, T2.  The following patches are
  applied to T0:

   T0 --> T1
   T0 --> T2

  Yielding:

   T0 + (T0 --> T1) + (T0 --> T2) = T3

  T3 is returned to the client, with a new sync key.  The result is now:

    Server:  T0 --> T1 --> T2 --> T3
    Client:  T3


N. Use Case 4: Client changes a task twice and syncs.  Server has two unsynced
   changes to the same task.  The edits were made alternately.

  The initial state is:

    Server:  T0 --> T1 --> T3
    Client:  T0 --> T2 --> T4

  The server constructs this tree:

    T0 --> T1 --> T3
       --> T2 --> T4

  The order of change is determined to be T1, T2, T3, T4.  The following patches
  are applied to T0:

    T0 --> T1
    T0 --> T2
    T1 --> T3
    T2 --> T4

    T0 + (T0 --> T1) + (T0 --> T2) + (T1 --> T3) + (T2 --> T4) = T5

  The result is T5, which is returned to the client, with a new sync key.  The
  result is:

    Server:  T0 --> T1 --> T2 --> T3 --> T4 --> T5
    Client:  T5


N. Terminology

  server      Network-accessible instance of taskd.
  client      Taskwarrior, or any other taskd client software.  Must obey the
              taskd server protocol.
  patch       Just the difference between two tasks, or in other words, the
              minimum necessary changes to convert one task to another.
  sync key    A transaction-specific identifier, in the form of a UUID.
  task        A single task, independent of state.

---










Göteborg Bit Factory                                               October 2012

                                     Title
                                   Version 1
                                    Draft 1

Status of this Memo

   This document provides information for the Internet community.  It does not
   specify an Internet standard of any kind.  Distribution of this document is
   not restricted.


Copyright Notice

   Copyright (C) 2010 - 2012, Göteborg Bit Factory.


Abstract

   This document is ...


Table of Contents

   1      Introduction
   1.1    Requirements

   9      References
   10     Acknowledgements
   11     Authors' Addresses
   12     Full Copyright Statement


1  Introduction

   For many years ...


1.1  Requirements

   In this document, we adopt the convention discussed in Section 1.3.2 of
   [RFC1122] of using the capitalized words MUST, REQUIRED, SHOULD, RECOMMENDED,
   MAY, and OPTIONAL to define the significance of each particular requirement
   specified in this document.

   In brief: "MUST" (or "REQUIRED") means that the item is an absolute
   requirement of the specification; "SHOULD" (or "RECOMMENDED") means there may
   exist valid reasons for ignoring this item, but the full implications should
   be understood before doing so; and "MAY" (or "OPTIONAL") means that his item
   is optional, and may be omitted without careful consideration.


9  References
 
   [RFC640] Postel, J., "Revised FTP Reply Codes", RFC 640, June,
        1975.


10  Acknowledgements

   Thanks to ... for testing and feedback.

   Thanks to ... whose comments helped improve this document.


11  Authors' Addresses

   Federico Hernandez
   Email: fredde@yootabory.org

   Paul Beckingham
   Email: paul@yootabory.org


12  Full Copyright Statement

   Copyright 2010 - 2012, Göteborg Bit Factory.
   All rights reserved.

   This document and translations of it may be copied and furnished to others,
   and derivative works that comment on or otherwise explain it or assist in its
   implmentation may be prepared, copied, published and distributed, in whole or
   in part, without restriction of any kind, provided that the above copyright
   notice and this paragraph are included on all such copies and derivative
   works.  However, this document itself may not be modified in any way, such as
   by removing the copyright notice or by ommission of certain sections.

   The limited permissions granted above are perpetual and will not be revoked
   by the authors or their successors or assigns.

   This document and the information contained herein is provided on an "AS IS"
   basis and the authors disclaim all warranties, express or implied, including
   but not limited to any warranty that the use of the information herein will
   not infringe any rights or any implied warranties of merchantability or
   fitness for a particular purpose.

---

